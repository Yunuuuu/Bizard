---
title: "Chromosome Plot"
author:
  - "**[Editor]** Yujie Peng;"
  - "**[Contributors]** Hu Zheng."
---

An chromosome plot (ideogram) is a graphical tool used to visualize chromosome structure and various genomic features on chromosomes. It typically represents each chromosome individually, drawing the length and structures such as the centromere to scale. Additionally, it can annotate multiple types of information on the chromosomes, including gene density, genetic variations, expression levels, repetitive sequences, and functional markers.

Chromosome plot can take linear or circular forms (such as Circos plots). Among these, linear ideograms are more suitable for displaying the linear structure of chromosomes and local data variations, making them particularly useful for studies such as genome-wide scans, population comparisons, and genetic mapping. Their visual representation not only facilitates an intuitive understanding of data distribution along chromosomes but also allows for the overlay of multiple layers of information, such as heatmaps, markers, lines, and color blocks.

## Example

![](../images/Omics/ChromosomePlot_demo.png){fig-alt="Chromosome Plot DEMO" fig-align="center" width="60%"}

The image shows a chromosome ideogram with dual-line labels, plotted using the built-in Liriodendron data from the RIdeogram package. Each chromosome is drawn to scale, with the color in the center representing genomic heatmap data (here, Fst values reflecting the degree of population differentiation). The upper and lower lines on both sides represent the Pi values (nucleotide diversity) of two populations (CE and CW) across different chromosomal regions.

## Setup

-   System Requirements: Cross-platform (Linux/MacOS/Windows)

-   Programming language: R

-   Dependent packages: `RIdeogram`

```{r packages setup, message=FALSE, warning=FALSE, output=FALSE}
# Install packages
if (!requireNamespace("RIdeogram", quietly = TRUE)) {
  install.packages("RIdeogram")
}

# Load packages
library(RIdeogram)
```

## Data Preparation

Use the built-in data from the `RIDeogram` package.

```{r load data}
data(human_karyotype, package="RIdeogram")
data(gene_density, package="RIdeogram")
data(Random_RNAs_500, package="RIdeogram")
```

You can use the `head()` function to view the basic format of each data:

```{r}
head(human_karyotype)
```

`human_karyotype` karyotype data contains five columns: the first column is the chromosome ID, the second and third columns are the chromosome start and end positions, and the fourth and fifth columns are the centromere start and end positions. Note: If there is no centromere information, only the first three columns can be retained.

```{r}
head(gene_density)
```

`gene_density` data is used to draw heat maps. It contains chromosome ID, start and end positions. The fourth column is a numerical value (such as the number of genes, SNP density, etc.) used for heat mapping on chromosomes.

```{r}
head(Random_RNAs_500)
```

`Random_RNAs_500` data is label information (track), with six columns including: label type (such as tRNA, rRNA, miRNA, etc.), shape (optional: circle, box or triangle), chromosome, start and end positions, and label color.

## Visualization

### 1. Basic Chromosome Plot

After running, you can find an SVG file and a PNG file in the working directory.

```{r fig-1BasicChromosomePlot}
#| label: fig-1BasicChromosomePlot
#| fig-cap: "Basic Chromosome Plot"
#| out.width: "95%"
#| warning: false
#| eval: false

# Basic Chromosome Plot
ideogram(karyotype = human_karyotype)
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-1BasicChromosomePlot}
![](../images/Omics/ChromosomePlot_fig1.png){fig-alt="Basic Chromosome Plot" fig-align="center" width="95%"}

Basic Chromosome Plot
:::

### 2. Chromosome plot with heatmap

Use the `overlaid` parameter to map the whole genome data onto the chromosome map, visualizing the gene density of the entire human genome.

```{r fig-1HeatmapChromosomePlot}
#| label: fig-1HeatmapChromosomePlot
#| fig-cap: "Chromosome plot with heatmap"
#| out.width: "95%"
#| warning: false
#| eval: false

# Chromosome plot with heatmap
ideogram(karyotype = human_karyotype, overlaid = gene_density)
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-1HeatmapChromosomePlot}
![](../images/Omics/ChromosomePlot_fig2.png){fig-alt="Chromosome plot with heatmap" fig-align="center" width="95%"}

Chromosome plot with heatmap
:::

### 3. Track Label

Map some genome-wide data as tracks on the side of the chromosome map.

```{r fig-1LabelChromosomePlot}
#| label: fig-1LabelChromosomePlot
#| fig-cap: "Track Label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Track Label
ideogram(karyotype = human_karyotype, label = Random_RNAs_500, label_type = "marker")
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-1LabelChromosomePlot}
![](../images/Omics/ChromosomePlot_fig3.png){fig-alt="Track Label" fig-align="center" width="95%"}

Track Label
:::

### 4. Plot heatmap and trajectory labels simultaneously

Simultaneously map the overlaid heatmap and track labels on chromosome representations.

```{r fig-1Both}
#| label: fig-1Both
#| fig-cap: "Plot heatmap and trajectory labels simultaneously"
#| out.width: "95%"
#| warning: false
#| eval: false

# Plot heatmap and trajectory labels simultaneously
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker")
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-1Both}
![](../images/Omics/ChromosomePlot_fig4.png){fig-alt="Plot heatmap and trajectory labels simultaneously" fig-align="center" width="95%"}

Plot heatmap and trajectory labels simultaneously
:::

### 5. Custom heatmap colors

To change the colors of the heatmap, modify the `colorset1` parameter (default is `colorset1 = c("#4575b4", "#ffffbf", "#d73027")`). You can use built-in color names, `colors()`, or hexadecimal color codes in the format `"#rrggbb"` or `"#rrggbbaa"`.

```{r fig-1Color}
#| label: fig-1Color
#| fig-cap: "Custom heatmap colors"
#| out.width: "95%"
#| warning: false
#| eval: false

# Custom heatmap colors
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker", colorset1 = c("#fc8d59", "#ffffbf", "#91bfdb"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-1Both}
![](../images/Omics/ChromosomePlot_fig5.png){fig-alt="Custom heatmap colors" fig-align="center" width="95%"}

Custom heatmap colors
:::

### 6. Chromosome plot without centromere information

If the species under study lacks clear centromere location information, a chromosome map can still be drawn. In this case, the karyotype file only needs to contain three columns: chromosome number, start position, and end position. The fourth and fifth columns containing the centromere start and end coordinates are unnecessary.

To simulate this situation, the last two columns of the `human_karyotype` data frame included with RIdeogram can be deleted:

```{r fig-6}
#| label: fig-6
#| fig-cap: "Chromosome plot without centromere information"
#| out.width: "95%"
#| warning: false
#| eval: false

# Chromosome plot without centromere information
human_karyotype <- human_karyotype[,1:3]
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker")
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-6}
![](../images/Omics/ChromosomePlot_fig6.png){fig-alt="不含着丝粒信息的染色体图" fig-align="center" width="95%"}

Chromosome plot without centromere information
:::

Even if centromere information is missing, RIdeogram can still be plotted, but the centromere region will not be marked in the plot.

### 7. Width setting when only part of the chromosome is used

In some cases, such as analyzing only a subset of chromosomes (e.g., the first 10 chromosomes), the default plot width may appear too scattered or leave too much white space. In this case, it is recommended to optimize the plot layout by adjusting the `width` parameter.

To simulate this situation, you can retain the first 10 chromosomes from the `human_karyotype` data and compare the results of plotting with the default width and the adjusted width:

Before modification:

```{r fig-1Fig7-1}
#| label: fig-1Fig7-1
#| fig-cap: "Width setting when only part of the chromosome is used"
#| out.width: "95%"
#| warning: false
#| eval: false

# Before modification:
human_karyotype <- human_karyotype[1:10,]
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker")
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-7-1}
![](../images/Omics/ChromosomePlot_fig7-1.png){fig-alt="Width setting when only part of the chromosome is used" fig-align="center" width="95%"}

Before modification:
:::

After modification:

```{r fig-1Fig7-2}
#| label: fig-1Fig7-2
#| fig-cap: "Width setting when only part of the chromosome is used"
#| out.width: "95%"
#| warning: false
#| eval: false

# After modification
human_karyotype <- human_karyotype[1:10,]
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker", width = 100)
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-7-2}
![](../images/Omics/ChromosomePlot_fig7-2.png){fig-alt="Width setting when only part of the chromosome is used" fig-align="center" width="95%"}

After modification
:::

### 8. Adjust the legend position

If you wish to reposition the legend, you can do so by modifying the `Lx` and `Ly` parameters. These parameters control the position of the legend's top-left corner relative to the image edge. The default values are `Lx = 160` and `Ly = 35`, respectively.

- `Lx`: The distance from the top-left corner of the legend to the left edge of the image.
- `Ly`: The distance from the top-left corner of the legend to the top edge of the image.

By adjusting these parameters, you can prevent the legend from overlapping the main image or position it more appropriately for your layout.

```{r fig-8}
#| label: fig-8
#| fig-cap: "Adjust the legend position"
#| out.width: "95%"
#| warning: false
#| eval: false

# Adjust the legend position
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = Random_RNAs_500, label_type = "marker", width = 100, Lx = 80, Ly = 25)
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-8}
![](../images/Omics/ChromosomePlot_fig8.png){fig-alt="Adjust the legend position" fig-align="center" width="95%"}

Adjust the legend position
:::

### 9. Different label types

RIdeogram supports multiple label types, and you can choose different ways to display data according to your visualization needs. Currently supported label types include:

- `"marker"` (marker point)
- `"heatmap"` (heat map)
- `"line"` (polyline)
- `"polygon"` (polygon)

#### 9.1 Heatmap Label

```{r fig-9-1}
#| label: fig-9-1
#| fig-cap: "Heatmap Label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Heatmap Label
data(human_karyotype, package="RIdeogram")
ideogram(karyotype = human_karyotype, overlaid = gene_density, label = LTR_density, label_type = "heatmap", colorset1 = c("#f7f7f7", "#e34a33"), colorset2 = c("#f7f7f7", "#2c7fb8"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-9-1}
![](../images/Omics/ChromosomePlot_fig9-1.png){fig-alt="Heatmap Label" fig-align="center" width="95%"}

Heatmap Label
:::

This graph uses human chromosome data built into RIdeogram to show the distribution of two features (gene density and LTR element density) across chromosomes. Different color shades represent different ranges of values, helping to visualize density differences across regions of the genome.

#### 9.2 Single line label

```{r fig-9-2}
#| label: fig-9-2
#| fig-cap: "Single line label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Single line label
data(liriodendron_karyotype, package="RIdeogram")
data(Fst_between_CE_and_CW, package="RIdeogram")
data(Pi_for_CE, package="RIdeogram")
ideogram(karyotype = liriodendron_karyotype, overlaid = Fst_between_CE_and_CW, label = Pi_for_CE, label_type = "line", colorset1 = c("#e5f5f9", "#99d8c9", "#2ca25f"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-9-2}
![](../images/Omics/ChromosomePlot_fig9-2.png){fig-alt="Single line label" fig-align="center" width="95%"}

Single line label
:::

This figure shows the continuous change trend of a single indicator (Pi value) on the chromosome. The fluctuation of the broken line can intuitively reflect the distribution pattern of genetic diversity in different segments.

#### 9.3 Double line label

```{r fig-9-3}
#| label: fig-9-3
#| fig-cap: "Double line label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Double line label
data(liriodendron_karyotype, package="RIdeogram")
data(Fst_between_CE_and_CW, package="RIdeogram")
data(Pi_for_CE_and_CW, package="RIdeogram")
ideogram(karyotype = liriodendron_karyotype, overlaid = Fst_between_CE_and_CW, label = Pi_for_CE_and_CW, label_type = "line", colorset1 = c("#e5f5f9", "#99d8c9", "#2ca25f"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-9-3}
![](../images/Omics/ChromosomePlot_fig9-3.png){fig-alt="Double line label" fig-align="center" width="95%"}

Double line label
:::

This figure shows the comparison of Pi values of two populations (CE and CW) on chromosomes. The double-line parallel depiction helps to discover the differences in diversity between the two groups in certain chromosome segments.

#### 9.4 Single polygon label

```{r fig-9-4}
#| label: fig-9-4
#| fig-cap: "Single polygon label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Single polygon label
data(liriodendron_karyotype, package="RIdeogram")
data(Fst_between_CE_and_CW, package="RIdeogram")
data(Pi_for_CE, package="RIdeogram")
ideogram(karyotype = liriodendron_karyotype, overlaid = Fst_between_CE_and_CW, label = Pi_for_CE, label_type = "polygon", colorset1 = c("#e5f5f9", "#99d8c9", "#2ca25f"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-9-4}
![](../images/Omics/ChromosomePlot_fig9-4.png){fig-alt="Single polygon label" fig-align="center" width="95%"}

Single polygon label
:::

This graph displays the variation of a single indicator in polygonal form. The change in area more significantly reflects the size of the value, making it suitable for emphasizing local significant areas.

#### 9.5 Double polygon label

```{r fig-9-5}
#| label: fig-9-5
#| fig-cap: "Double polygon label"
#| out.width: "95%"
#| warning: false
#| eval: false

# Double polygon label
data(liriodendron_karyotype, package="RIdeogram") 
data(Fst_between_CE_and_CW, package="RIdeogram") 
data(Pi_for_CE_and_CW, package="RIdeogram") 
ideogram(karyotype = liriodendron_karyotype, overlaid = Fst_between_CE_and_CW, label = Pi_for_CE_and_CW, label_type = "polygon", colorset1 = c("#e5f5f9", "#99d8c9", "#2ca25f"))
convertSVG("chromosome.svg", device = "png")
```

::: {#fig-9-5}
![](../images/Omics/ChromosomePlot_fig9-5.png){fig-alt="Double polygon label" fig-align="center" width="95%"}

Double polygon label
:::

The second polygon label is automatically offset horizontally by 0.2 chromosome widths to improve readability. This graph uses two sets of polygons to simultaneously display the differences in metrics between the two populations on the chromosome. The overlapping areas or spacing allow for intuitive comparison of the numerical distribution and trends of each segment.

### 10. Output image files in different formats

In addition to the png format, other formats can also be generated using the `device` parameter:

```{r fig-10-1}
#| label: fig-10-1
#| fig-cap: "Output image files in different formats"
#| out.width: "95%"
#| warning: false
#| eval: false

convertSVG("chromosome.svg", device = "tiff", dpi = 600)
```

Without `device`, there are some quick functions to convert SVG images to other formats:

```{r fig-10-2}
#| label: fig-10-2
#| fig-cap: "Output image files in different formats"
#| out.width: "95%"
#| warning: false
#| eval: false

svg2png("chromosome.svg")
svg2pdf("chromosome.svg")
svg2jpg("chromosome.svg")
svg2tiff("chromosome.svg")
```

## Application

::: {#fig-ChromosomePlotApplications1}
![](../images/Omics/ChromosomePlot_app1.jpg){fig-alt="ChromosomePlotApp1" fig-align="center" width="60%"}

iMapper maps and analyzes insertion site sequence data
:::

::: {#fig-ChromosomePlotApplications2}
![](../images/Omics/ChromosomePlot_app2.jpg){fig-alt="ChromosomePlotApp2" fig-align="center" width="60%"}

Schematic diagram of the combined domains inferred by IsoPlotter and mapped onto chromosomes
:::

## Reference

\[1\] RIdeogram: drawing SVG graphics to visualize and map genome-wide data on idiograms https://cran.r-project.org/web/packages/RIdeogram/vignettes/RIdeogram.html
\[2\] Hao Z, Lv D, Ge Y, Shi J, Weijers D, Yu G, Chen J. 2020. RIdeogram: drawing SVG graphics to visualize and map genome-wide data on the idiograms. PeerJ Comput. Sci. 6:e251 http://doi.org/10.7717/peerj-cs.251


