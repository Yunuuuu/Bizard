---
title: "tSNE"
author:
  - "**[Editor]** [Hu Zheng](https://github.com/ZhengTiger);"
  - "**[Contributors]** "
---

::: callout-note
**Hiplot website**

This page is the tutorial for source code version of the Hiplot `tSNE` plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:

<https://hiplot.cn/basic/tsne?lang=en>
:::

T-sne is a nonlinear dimensionality reduction algorithm suitable for high-dimensional data reduction to two or three dimensions and visualization. The algorithm can make the t distribution of points with greater similarity closer in the lower dimensional space. For low similarity points, the t distribution is farther away in the low dimensional space.

## Setup

-   System Requirements: Cross-platform (Linux/MacOS/Windows)

-   Programming language: R

-   Dependent packages: `data.table`; `jsonlite`; `Rtsne`; `ggpubr`

```{r packages setup, message=FALSE, warning=FALSE, output=FALSE}
# Install packages
if (!requireNamespace("data.table", quietly = TRUE)) {
  install.packages("data.table")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
  install.packages("jsonlite")
}
if (!requireNamespace("Rtsne", quietly = TRUE)) {
  install.packages("Rtsne")
}
if (!requireNamespace("ggpubr", quietly = TRUE)) {
  install.packages("ggpubr")
}

# Load packages
library(data.table)
library(jsonlite)
library(Rtsne)
library(ggpubr)
```

## Data Preparation

The loaded data are the data set (gene name and corresponding gene expression value) and sample information (sample name and grouping).

```{r load data, message=FALSE, warning=FALSE}
# Load data
data1 <- data.table::fread(jsonlite::read_json("https://hiplot.cn/ui/basic/tsne/data.json")$exampleData[[1]]$textarea[[1]])
data1 <- as.data.frame(data1)
data2 <- data.table::fread(jsonlite::read_json("https://hiplot.cn/ui/basic/tsne/data.json")$exampleData[[1]]$textarea[[2]])
data2 <- as.data.frame(data2)

# convert data structure
sample.info <- data2
rownames(data1) <- data1[, 1]
data1 <- as.matrix(data1[, -1])
## tsne
set.seed(123)
tsne_info <- Rtsne(t(data1), perplexity = 1, theta = 0.1, check_duplicates = FALSE)
colnames(tsne_info$Y) <- c("tSNE_1", "tSNE_2")
# handle data
tsne_data <- data.frame(
  sample = colnames(data1),
  tsne_info$Y
)
colorBy <- sample.info[match(colnames(data1), sample.info[, 1]), "group"]
colorBy <- factor(colorBy, level = colorBy[!duplicated(colorBy)])
tsne_data$colorBy = colorBy
shapeBy <- NULL

# View data
head(data1)
head(data2)
```

## Visualization

```{r fig-1tsne}
#| label: fig-1tsne
#| fig-cap: "tsne"
#| out.width: "95%"
#| fig-height: 3
#| fig-width: 4
#| warning: false
#| error: false
#| message: false

# tsne
p <- ggscatter(data = tsne_data, x = "tSNE_1", y = "tSNE_2", size = 2, 
               palette = "lancet", color = "colorBy") +
  labs(color = "group") +
  ggtitle("tSNE Plot1") +
  theme_bw() +
  theme(text = element_text(family = "Arial"),
        plot.title = element_text(size = 12,hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),
        legend.position = "right",
        legend.direction = "vertical",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10))

p
```

Different colors represent different samples, which is the same as PCA (principal component analysis) graphic interpretation. The difference lies in the visualization effect. For dissimilar points in T-SNE, a small distance will generate a large gradient to repel them.


