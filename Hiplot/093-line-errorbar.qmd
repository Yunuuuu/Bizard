---
title: "Line (errorbar)"
author:
  - "**[Editor]** [Hu Zheng](https://github.com/ZhengTiger);"
  - "**[Contributors]** "
---

::: callout-note
**Hiplot website**

This page is the tutorial for source code version of the Hiplot `Line (errorbar)` plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:

<https://hiplot.cn/basic/line-errorbar?lang=en>
:::

The error line mainly indicates the error range of each data point and shows the potential error or uncertainty relative to each data in the series.

## Setup

-   System Requirements: Cross-platform (Linux/MacOS/Windows)

-   Programming language: R

-   Dependent packages: `data.table`; `jsonlite`; `ggpubr`

```{r packages setup, message=FALSE, warning=FALSE, output=FALSE}
# Install packages
if (!requireNamespace("data.table", quietly = TRUE)) {
  install.packages("data.table")
}
if (!requireNamespace("jsonlite", quietly = TRUE)) {
  install.packages("jsonlite")
}
if (!requireNamespace("ggpubr", quietly = TRUE)) {
  install.packages("ggpubr")
}

# Load packages
library(data.table)
library(jsonlite)
library(ggpubr)
```

## Data Preparation

The loaded data are two groups and their corresponding values.

```{r load data, message=FALSE, warning=FALSE}
# Load data
data <- data.table::fread(jsonlite::read_json("https://hiplot.cn/ui/basic/line-errorbar/data.json")$exampleData$textarea[[1]])
data <- as.data.frame(data)

# Convert data structure
data[, 3] <- factor(data[, 3], levels = unique(data[, 3]))

# View data
head(data)
```

## Visualization

```{r fig-1line-errorbar}
#| label: fig-1line-errorbar
#| fig-cap: "Line (errorbar)"
#| out.width: "95%"
#| fig-height: 4
#| fig-width: 6
#| warning: false
#| error: false
#| message: false

# Line (errorbar)
p <- ggline(
  data, x = "Group1", y = "Value", color = "Group2",
  add = "mean_se", title = "Line plot with errorbar", palette = "npg") +
  stat_compare_means(aes_(group = as.name("Group2"))) +
  theme_bw() +
  theme(text = element_text(family = "Arial"),
        plot.title = element_text(size = 12, hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10),
        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),
        legend.position = "right",
        legend.direction = "vertical",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 10))

p
```

The red line in low type represents the maximum value of the low type in treat1, the red line represents the minimum value of the low type in treat1, and so on. Conduct rank-sum test on treat1 and treat2 according to low,mid and high types respectively, and display p-value at the top of the figure.


